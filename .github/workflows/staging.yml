name: Staging CI/CD

on:
  push:
    branches:
      - develop

jobs:
  setup:
    runs-on: self-hosted
    outputs:
      affected: ${{ steps.set-affected.outputs.affected }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20.14.0
      - name: Enable Corepack
        run: corepack enable
      - uses: nrwl/nx-set-shas@v4
      - id: set-affected
        run: |
          affected=$(yarn nx show projects --type app --affected --json)
          echo "affected=$affected" >> $GITHUB_OUTPUT

  build:
    needs: setup
    if: needs.setup.outputs.affected != '[]'
    runs-on: self-hosted
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected) }}
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Get project version
        id: get-version
        run: |
          LATEST_TAG=$(git describe --tags --match "${{ matrix.project }}/v*" --abbrev=0 2>/dev/null || echo "${{ matrix.project }}/v1.0.0")
          VERSION=${LATEST_TAG#*/v}-staging
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Latest tag: $LATEST_TAG"

      - name: Setup project
        run: |
          if [ "${{ matrix.project }}" == "smpark-oauth2.0" ]; then
            echo "Setting up smpark-oauth2.0 for staging"
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" > apps/smpark-oauth2.0/.env.staging
            echo "LOGIN_COOKIE_EXPIRES_IN=${{ secrets.LOGIN_COOKIE_EXPIRES_IN }}" >> apps/smpark-oauth2.0/.env.staging
            echo "MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }}" >> apps/smpark-oauth2.0/.env.staging
            echo "MONGO_DATABASE_PASSWORD=${{ secrets.MONGO_DATABASE_PASSWORD }}" >> apps/smpark-oauth2.0/.env.staging
            echo "MONGO_DATABASE_SESSION_COLLECTION=${{ secrets.MONGO_DATABASE_SESSION_COLLECTION }}" >> apps/smpark-oauth2.0/.env.staging
            echo "MONGO_DATABASE_SESSION_KEY=${{ secrets.MONGO_DATABASE_SESSION_KEY }}" >> apps/smpark-oauth2.0/.env.staging
            echo "MONGO_DATABASE_URI=${{ secrets.MONGO_DATABASE_URI }}" >> apps/smpark-oauth2.0/.env.staging
            echo "MONGO_DATABASE_USER=${{ secrets.MONGO_DATABASE_USER }}" >> apps/smpark-oauth2.0/.env.staging
            echo "OAUTH_ACCESS_SECRET_KEY=${{ secrets.OAUTH_ACCESS_SECRET_KEY }}" >> apps/smpark-oauth2.0/.env.staging
            echo "OAUTH_ACCESS_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_ACCESS_TOKEN_EXPIRES_IN }}" >> apps/smpark-oauth2.0/.env.staging
            echo "OAUTH_CODE_EXPIRES_IN=${{ secrets.OAUTH_CODE_EXPIRES_IN }}" >> apps/smpark-oauth2.0/.env.staging
            echo "OAUTH_REFRESH_SECRET_KEY=${{ secrets.OAUTH_REFRESH_SECRET_KEY }}" >> apps/smpark-oauth2.0/.env.staging
            echo "OAUTH_REFRESH_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_REFRESH_TOKEN_EXPIRES_IN }}" >> apps/smpark-oauth2.0/.env.staging
            echo "OAUTH_ISSUER=${{ vars.STAGING_OAUTH_ISSUER }}" >> apps/smpark-oauth2.0/.env.staging
            echo "NODE_ENV=staging" >> apps/smpark-oauth2.0/.env.staging
            echo "NGINX_PORT=${{ vars.STAGING_OAUTH_NGINX_PORT }}" >> apps/smpark-oauth2.0/.env.staging
            echo "APP_PORT=${{ vars.STAGING_OAUTH_APP_PORT }}" >> apps/smpark-oauth2.0/.env.staging
            echo "VERSION=$VERSION" >> apps/smpark-oauth2.0/.env.staging
          elif [ "${{ matrix.project }}" == "smpark-resource" ]; then
            echo "Setting up smpark-resource for staging"
            echo "MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }}" >> apps/smpark-resource/.env.staging
            echo "MONGO_DATABASE_PASSWORD=${{ secrets.MONGO_DATABASE_PASSWORD }}" >> apps/smpark-resource/.env.staging
            echo "MONGO_DATABASE_URI=${{ secrets.MONGO_DATABASE_URI }}" >> apps/smpark-resource/.env.staging
            echo "OAUTH_ACCESS_SECRET_KEY=${{ secrets.OAUTH_ACCESS_SECRET_KEY }}" >> apps/smpark-resource/.env.staging
            echo "MONGO_DATABASE_USER=${{ secrets.MONGO_DATABASE_USER }}" >> apps/smpark-resource/.env.staging
            echo "NODE_ENV=staging" >> apps/smpark-resource/.env.staging
            echo "NGINX_PORT=${{ vars.STAGING_RESOURCE_NGINX_PORT }}" >> apps/smpark-resource/.env.staging
            echo "APP_PORT=${{ vars.STAGING_RESOURCE_APP_PORT }}" >> apps/smpark-resource/.env.staging
            echo "VERSION=$VERSION" >> apps/smpark-resource/.env.staging
          elif [ "${{ matrix.project }}" == "smpark-space" ]; then
            echo "Setting up smpark-space for staging"
            echo "SPACE_GOOGLE_CLIENT_ID=${{ secrets.SPACE_GOOGLE_CLIENT_ID }}" > apps/smpark-space/.env.staging
            echo "SPACE_GOOGLE_CLIENT_SECRET=${{ secrets.SPACE_GOOGLE_CLIENT_SECRET }}" >> apps/smpark-space/.env.staging
            echo "SPACE_GITHUB_CLIENT_ID=${{ secrets.SPACE_GITHUB_CLIENT_ID }}" >> apps/smpark-space/.env.staging
            echo "SPACE_GITHUB_CLIENT_SECRET=${{ secrets.SPACE_GITHUB_CLIENT_SECRET }}" >> apps/smpark-space/.env.staging
            echo "SPACE_SMPARK_CLIENT_ID=${{ secrets.SPACE_SMPARK_CLIENT_ID }}" >> apps/smpark-space/.env.staging
            echo "SPACE_SMPARK_CLIENT_SECRET=${{ secrets.SPACE_SMPARK_CLIENT_SECRET }}" >> apps/smpark-space/.env.staging
            echo "NEXTAUTH_SECRET=${{ secrets.SPACE_NEXTAUTH_SECRET }}" >> apps/smpark-space/.env.staging
            echo "NODE_ENV=staging" >> apps/smpark-space/.env.staging
            echo "NEXTAUTH_URL=${{ vars.STAGING_NEXTAUTH_URL }}" >> apps/smpark-space/.env.staging
            echo "NEXT_PUBLIC_API_URL=${{ vars.STAGING_NEXT_PUBLIC_API_URL }}" >> apps/smpark-space/.env.staging
            echo "SMPARK_OAUTH_BASE_URI=${{ vars.STAGING_SMPARK_OAUTH_BASE_URI }}" >> apps/smpark-space/.env.staging
            echo "SMPARK_RESOURCE_BASE_URI=${{ vars.STAGING_SMPARK_RESOURCE_BASE_URI }}" >> apps/smpark-space/.env.staging
            echo "SMPARK_CLIENT_REDIRECT_URI=${{ vars.STAGING_SMPARK_CLIENT_REDIRECT_URI }}" >> apps/smpark-space/.env.staging
            echo "NEXT_PUBLIC_SMPARK_RESOURCE_BASE_URI=${{ vars.STAGING_NEXT_PUBLIC_SMPARK_RESOURCE_BASE_URI }}" >> apps/smpark-space/.env.staging
            echo "VERSION=$VERSION" >> apps/smpark-space/.env.staging
            
            # LFS setup for smpark-space
            git lfs pull
          fi

      - name: Cache LFS
        if: matrix.project == 'smpark-space'
        uses: actions/cache@v4
        with:
          path: .git/lfs/objects
          key: ${{ runner.os }}-staging-lfs-${{ hashFiles('.gitattributes') }}
          restore-keys: |
            ${{ runner.os }}-staging-lfs-

      - name: Cache Next.js
        if: matrix.project == 'smpark-space'
        uses: actions/cache@v4
        with:
          path: apps/smpark-space/.next/cache
          key: ${{ runner.os }}-staging-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('apps/smpark-space/**.[jt]s', 'apps/smpark-space/**.[jt]sx') }}

      - name: Cache NX
        uses: actions/cache@v4
        with:
          path: .nx-cache
          key: ${{ runner.os }}-staging-nx-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-staging-nx-

      - name: Lint
        run: yarn nx lint ${{ matrix.project }}

      - name: Build
        run: yarn nx build:staging ${{ matrix.project }}

      - name: Transfer .env files to Windows Desktop
        run: |
          scp "./apps/${{ matrix.project }}/.env.staging" ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_DDNS }}:D:/

      - name: Deploy to Windows Desktop
        run: |
          if [ "${{ matrix.project }}" == "smpark-oauth2.0" ]; then
            PORT="${{ vars.STAGING_OAUTH_NGINX_PORT }}":"${{ vars.STAGING_OAUTH_APP_PORT }}"
          elif [ "${{ matrix.project }}" == "smpark-resource" ]; then
            PORT="${{ vars.STAGING_RESOURCE_NGINX_PORT }}":"${{ vars.STAGING_RESOURCE_APP_PORT }}"
          elif [ "${{ matrix.project }}" == "smpark-space" ]; then
            PORT="${{ vars.STAGING_SPACE_NGINX_PORT }}":"${{ vars.STAGING_SPACE_APP_PORT }}"
          else
            echo "Unknown project: ${{ matrix.project }}"
            exit 1
          fi
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_DDNS }} "cd /d D: && deploy.bat "${{ secrets.DOCKER_USERNAME }}" "${{ secrets.DOCKER_TOKEN }}" "${{ matrix.project }}" "$VERSION" "$PORT" "staging""
