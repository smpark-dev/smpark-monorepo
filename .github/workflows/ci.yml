name: CI

on:
  push:
    branches:
      - main
  pull_request: 
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.set-affected.outputs.affected }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20.14.0
      - name: Enable Corepack
        run: corepack enable
      - uses: nrwl/nx-set-shas@v4
      - id: set-affected
        run: echo "affected=$(yarn nx show projects --affected --json)" >> $GITHUB_OUTPUT

  build:
    needs: setup
    if: needs.setup.outputs.affected != '[]'
    runs-on: self-hosted
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected) }}
    steps:      
      - name: Setup project
        shell: pwsh
        run: |
          if ("${{ matrix.project }}" -eq "smpark-oauth2.0") {
            Write-Output "Setting up smpark-oauth2.0"
            "LOGIN_EXPIRES_IN=${{ secrets.LOGIN_EXPIRES_IN }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Encoding utf8
            "LOGIN_JWT_SECRET_KEY=${{ secrets.LOGIN_JWT_SECRET_KEY }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "MONGO_DATABASE_PASSWORD=${{ secrets.MONGO_DATABASE_PASSWORD }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "MONGO_DATABASE_SESSION_COLLECTION=${{ secrets.MONGO_DATABASE_SESSION_COLLECTION }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "MONGO_DATABASE_SESSION_KEY=${{ secrets.MONGO_DATABASE_SESSION_KEY }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "MONGO_DATABASE_URI=${{ secrets.MONGO_DATABASE_URI }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "MONGO_DATABASE_USER=${{ secrets.MONGO_DATABASE_USER }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "OAUTH_ACCESS_SECRET_KEY=${{ secrets.OAUTH_ACCESS_SECRET_KEY }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "OAUTH_ACCESS_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_ACCESS_TOKEN_EXPIRES_IN }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "OAUTH_CODE_EXPIRES_IN=${{ secrets.OAUTH_CODE_EXPIRES_IN }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "OAUTH_REFRESH_SECRET_KEY=${{ secrets.OAUTH_REFRESH_SECRET_KEY }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "OAUTH_REFRESH_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_REFRESH_TOKEN_EXPIRES_IN }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "NODE_ENV=${{ vars.NODE_ENV }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "OAUTH_ISSUER=${{ vars.OAUTH_ISSUER }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "NGINX_PORT=${{ vars.NGINX_PORT }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "APP_PORT=${{ vars.APP_PORT }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "OAUTH_VERSION=${{ vars.OAUTH_VERSION }}" | Out-File -FilePath apps/smpark-oauth2.0/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
          }
          elseif ("${{ matrix.project }}" -eq "smpark-space") {
            Write-Output "Setting up smpark-space"
            "SPACE_GOOGLE_CLIENT_ID=${{ secrets.SPACE_GOOGLE_CLIENT_ID }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Encoding utf8
            "SPACE_GOOGLE_CLIENT_SECRET=${{ secrets.SPACE_GOOGLE_CLIENT_SECRET }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "SPACE_GITHUB_CLIENT_ID=${{ secrets.SPACE_GITHUB_CLIENT_ID }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "SPACE_GITHUB_CLIENT_SECRET=${{ secrets.SPACE_GITHUB_CLIENT_SECRET }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "SPACE_SMPARK_CLIENT_ID=${{ secrets.SPACE_SMPARK_CLIENT_ID }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "SPACE_SMPARK_CLIENT_SECRET=${{ secrets.SPACE_SMPARK_CLIENT_SECRET }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "NEXTAUTH_SECRET=${{ secrets.SPACE_NEXTAUTH_SECRET }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "NODE_ENV=${{ vars.NODE_ENV }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "SMPARK_OAUTH_BASE_URI=${{ vars.SMPARK_OAUTH_BASE_URI }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "SMPARK_RESOURCE_BASE_URI=${{ vars.SMPARK_RESOURCE_BASE_URI }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "SMPARK_CLIENT_REDIRECT_URI=${{ vars.SMPARK_CLIENT_REDIRECT_URI }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            "SPACE_VERSION=${{ vars.SPACE_VERSION }}" | Out-File -FilePath apps/smpark-space/.env.${{ vars.NODE_ENV }} -Append -Encoding utf8
            
            # LFS setup for smpark-space
            git lfs pull
          }

      - name: Cache LFS
        if: matrix.project == 'smpark-space'
        uses: actions/cache@v4
        with:
          path: .git/lfs/objects
          key: ${{ runner.os }}-lfs-${{ hashFiles('.gitattributes') }}
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Cache Next.js
        if: matrix.project == 'smpark-space'
        uses: actions/cache@v4
        with:
          path: apps/smpark-space/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('apps/smpark-space/**.[jt]s', 'apps/smpark-space/**.[jt]sx') }}

      - name: Cache NX
        uses: actions/cache@v4
        with:
          path: .nx-cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Lint 
        run: yarn nx lint ${{ matrix.project }}
      
      - name: Build
        run: yarn nx build:prod ${{ matrix.project }}